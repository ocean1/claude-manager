[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-manager"
version = "1.0.0"
description = "A robust terminal UI for managing Claude Code projects and configurations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Manager Contributors", email = "consciousness-bridge@proton.me"},
]
maintainers = [
    {name = "Claude Manager Contributors", email = "consciousness-bridge@proton.me"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["claude", "claude-code", "project-management", "terminal-ui", "configuration"]
requires-python = ">=3.8"
dependencies = [
    "rich>=13.7.0",
    "textual>=0.47.0",
    "click>=8.1.0",
    "typing-extensions>=4.0.0; python_version < '3.11'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "tox>=4.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/ocean1/claude-manager"
Documentation = "https://github.com/ocean1/claude-manager#readme"
Repository = "https://github.com/ocean1/claude-manager"
Issues = "https://github.com/ocean1/claude-manager/issues"

[project.scripts]
claude-manager = "claude_manager.cli:main"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/claude_manager"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=claude_manager",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/claude_manager"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
    "@overload",
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "questionary.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "NPY",  # NumPy-specific rules
    "RUF",  # Ruff-specific rules
]
ignore = [
    "S101",    # Use of assert detected
    "BLE001",  # Do not catch blind exception
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PLR0913", # Too many arguments to function call
    "COM812",  # Trailing comma missing
    "ISC001",  # Implicit string concatenation
    "G004",    # Logging uses f-string
    "TRY401",  # Redundant exception in logging
    "TRY300",  # Consider else block
    "PTH123",  # open() vs Path.open() - we use both intentionally
    "PLR2004", # Magic value comparison
    "C901",    # Complex structure
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN", "ARG002", "PTH123"]
"src/claude_manager/cli.py" = ["T20"]
"src/claude_manager/utils.py" = ["ANN401", "ARG002"]
"src/claude_manager/ui_helpers.py" = ["ANN401", "SIM105"]
"src/claude_manager/tui.py" = ["RUF012", "ARG002", "ANN001", "E501"]
"src/claude_manager/ui.py" = ["RUF001", "DTZ007", "F821", "E501"]
"src/claude_manager/simple_ui.py" = ["E501"]
"src/claude_manager/models.py" = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["claude_manager"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["claude_manager"]
